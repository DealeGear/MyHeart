<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Projeto MyHeart</title>
  <style>
    /* Estilos Gerais */
    body {
      font-family: Arial, sans-serif;
      background-color: #f2f2f2;
      margin: 0;
      padding: 0;
    }
    header {
      background-color: #004d7a;
      color: white;
      padding: 20px;
      text-align: center;
      position: relative;
    }
    header h1,
    header p {
      margin: 0;
    }
    /* Link no cabeçalho */
    header a {
      color: #fff;
      text-decoration: none;
      font-size: 0.9rem;
      position: absolute;
      top: 20px;
      left: 20px;
      border: 1px solid #fff;
      padding: 5px 10px;
      border-radius: 4px;
      transition: background-color 0.3s, color 0.3s;
    }
    header a:hover {
      background-color: #fff;
      color: #004d7a;
    }
    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 20px;
    }
    .controls {
      margin-top: 20px;
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      width: 100%;
    }
    .control-group {
      margin: 10px 20px;
      text-align: center;
      flex: 1;
      min-width: 250px;
    }
    label {
      font-size: 1rem;
      margin-bottom: 5px;
      display: block;
    }
    input[type="range"] {
      width: 100%;
      max-width: 300px;
    }
    /* Contêiner do coração 3D - área reduzida */
    .heart-canvas-container {
      width: 90%;
      max-width: 300px;
      margin: 20px 0;
    }
    /* Contêiner do gráfico - área ampliada */
    .chart-canvas-container {
      width: 90%;
      max-width: 800px;
      margin: 20px 0;
    }
    canvas {
      background-color: white;
      border: 1px solid #ccc;
      border-radius: 4px;
      width: 100%;
      height: auto;
      display: block;
    }
    @media (max-width: 600px) {
      .controls {
        flex-direction: column;
        align-items: center;
      }
      .control-group {
        margin: 10px;
      }
    }
  </style>
  <!-- Inclusão do Three.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
</head>
<body>
  <header>
    <a href="https://dealegear.wixsite.com/meusite" target="_blank">Retornar para DealeGear</a>
    <h1>Projeto MyHeart</h1>
    <p>Simulação Virtual do Coração</p>
  </header>

  <div class="container">
    <!-- Container para o render 3D do coração -->
    <div class="heart-canvas-container">
      <canvas id="heartCanvas"></canvas>
    </div>

    <!-- Controles para parâmetros -->
    <div class="controls">
      <div class="control-group">
        <label for="heartRate">Batimento Cardíaco (BPM): <span id="heartRateValue">72</span></label>
        <input type="range" id="heartRate" min="40" max="180" value="72" />
      </div>
      <div class="control-group">
        <label for="bloodPressure">Pressão Arterial (mmHg): <span id="bloodPressureValue">120</span></label>
        <input type="range" id="bloodPressure" min="80" max="180" value="120" />
      </div>
    </div>

    <!-- Container para o gráfico -->
    <div class="chart-canvas-container">
      <canvas id="chartCanvas"></canvas>
    </div>
  </div>

  <!-- Inclusão do Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    /* =========================
       Ajuste dos Canvas
       ========================= */
    function adjustCanvases() {
      // Para o gráfico, definindo uma altura fixa
      const chartCanvas = document.getElementById('chartCanvas');
      chartCanvas.width = chartCanvas.clientWidth;
      chartCanvas.height = 400;
      
      // Para o coração 3D, atualizamos o renderer
      if (heartRenderer) {
        heartRenderer.setSize(heartCanvas.clientWidth, heartCanvas.clientHeight);
        heartCamera.aspect = heartCanvas.clientWidth / heartCanvas.clientHeight;
        heartCamera.updateProjectionMatrix();
      }
    }
    window.addEventListener('resize', adjustCanvases);
    window.addEventListener('load', adjustCanvases);

    /* =========================
       Variáveis dos Parâmetros
       ========================= */
    let heartRate = 72; // BPM
    let bloodPressure = 120; // mmHg
    const heartRateSlider = document.getElementById("heartRate");
    const bloodPressureSlider = document.getElementById("bloodPressure");
    const heartRateValueSpan = document.getElementById("heartRateValue");
    const bloodPressureValueSpan = document.getElementById("bloodPressureValue");

    heartRateSlider.addEventListener("input", function () {
      heartRate = parseInt(this.value);
      heartRateValueSpan.textContent = this.value;
    });
    bloodPressureSlider.addEventListener("input", function () {
      bloodPressure = parseInt(this.value);
      bloodPressureValueSpan.textContent = this.value;
    });

    /* =========================
       Render do Coração com Three.js
       ========================= */
    const heartCanvas = document.getElementById("heartCanvas");
    const heartRenderer = new THREE.WebGLRenderer({
      canvas: heartCanvas,
      antialias: true,
      alpha: true
    });
    heartRenderer.setSize(heartCanvas.clientWidth, heartCanvas.clientHeight);

    // Criação da cena e câmera
    const heartScene = new THREE.Scene();
    const heartCamera = new THREE.PerspectiveCamera(
      45,
      heartCanvas.clientWidth / heartCanvas.clientHeight,
      0.1,
      1000
    );
    heartCamera.position.z = 50;

    // Criação do modelo 3D do coração usando uma forma extrudida
    const x = 0, y = 0;
    const heartShape = new THREE.Shape();
    heartShape.moveTo(x + 5, y + 5);
    heartShape.bezierCurveTo(x + 5, y + 5, x + 4, y, x, y);
    heartShape.bezierCurveTo(x - 6, y, x - 6, y + 7, x - 6, y + 7);
    heartShape.bezierCurveTo(x - 6, y + 11, x - 3, y + 15.4, x + 5, y + 19);
    heartShape.bezierCurveTo(x + 12, y + 15.4, x + 16, y + 11, x + 16, y + 7);
    heartShape.bezierCurveTo(x + 16, y + 7, x + 16, y, x + 10, y);
    heartShape.bezierCurveTo(x + 7, y, x + 5, y + 5, x + 5, y + 5);

    const extrudeSettings = {
      depth: 2,
      bevelEnabled: true,
      bevelSegments: 2,
      steps: 2,
      bevelSize: 1,
      bevelThickness: 1
    };

    const heartGeometry = new THREE.ExtrudeGeometry(heartShape, extrudeSettings);
    heartGeometry.center(); // Centraliza a geometria
    const heartMaterial = new THREE.MeshPhongMaterial({
      color: 0xff0000,
      shininess: 100
    });
    const heartMesh = new THREE.Mesh(heartGeometry, heartMaterial);
    heartScene.add(heartMesh);

    // Iluminação
    const ambientLight = new THREE.AmbientLight(0x404040, 2);
    heartScene.add(ambientLight);
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
    directionalLight.position.set(0, 1, 1);
    heartScene.add(directionalLight);

    // Clock para a animação de pulsação
    const clock = new THREE.Clock();
    function animateHeart() {
      const elapsed = clock.getElapsedTime();
      // Período em segundos (60/BPM)
      const period = 60 / heartRate;
      const scale = 1 + 0.15 * Math.abs(Math.sin((2 * Math.PI * elapsed) / period));
      heartMesh.scale.set(scale, scale, scale);

      // Atualiza a cor com base na pressão arterial
      const redValue = Math.floor(150 + ((bloodPressure - 80) / (180 - 80)) * 105);
      heartMaterial.color.set(`rgb(${redValue}, 0, 0)`);

      heartRenderer.render(heartScene, heartCamera);
      requestAnimationFrame(animateHeart);
    }
    animateHeart();

    /* =========================
       Configuração do Gráfico (Chart.js)
       ========================= */
    const chartCtx = document.getElementById("chartCanvas").getContext("2d");
    let chartData = {
      labels: [],
      datasets: [
        {
          label: 'Batimento Cardíaco (BPM)',
          borderColor: 'rgba(255, 99, 132, 1)',
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          data: [],
          fill: false,
          tension: 0.3,
        },
        {
          label: 'Pressão Arterial (mmHg)',
          borderColor: 'rgba(54, 162, 235, 1)',
          backgroundColor: 'rgba(54, 162, 235, 0.2)',
          data: [],
          fill: false,
          tension: 0.3,
        }
      ]
    };

    const myChart = new Chart(chartCtx, {
      type: 'line',
      data: chartData,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: false,
        scales: {
          x: {
            title: {
              display: true,
              text: 'Tempo (s)'
            }
          },
          y: {
            title: {
              display: true,
              text: 'Valor'
            },
            beginAtZero: true
          }
        }
      }
    });

    let timeCounter = 0;
    setInterval(() => {
      timeCounter++;
      chartData.labels.push(timeCounter.toString());
      chartData.datasets[0].data.push(heartRate);
      chartData.datasets[1].data.push(bloodPressure);
      if (chartData.labels.length > 20) {
        chartData.labels.shift();
        chartData.datasets[0].data.shift();
        chartData.datasets[1].data.shift();
      }
      myChart.update();
    }, 1000);
  </script>
</body>
</html>
